# Deploy a version of SpeckleServer

name: Deploy to Production Environment
on:
  workflow_dispatch:
    inputs:
      tag:
        description: tag to deploy (without the v)
        required: true
        default: '1.9.10'
      region:
        description: The region to deploy to ireland, hongkong, australia, uk or canada
        required: true
        default: 'ireland'
      ansibleScriptsBranch:
        description: branch of the  global-speckle-server-ansible-playbooks repos
        required: true
        default: 'master'

jobs:
  prodDeploy:
    runs-on: ubuntu-latest
    steps:
      - name: Region map
        id: regionMap
        run: |
          if [ ${{ github.event.inputs.region }} == ireland ]; then
            awsRegion=eu-west-1
          elif [ ${{ github.event.inputs.region }} == hongkong ]; then
           awsRegion=ap-east-1
          elif [ ${{ github.event.inputs.region }} == australia ]; then
           awsRegion=ap-southeast-2
          elif [ ${{ github.event.inputs.region }} == uk ]; then
           awsRegion=eu-west-2
          elif [ ${{ github.event.inputs.region }} == canada ]; then
           awsRegion=ca-central-1
          else
            echo "::error region can only be one of ireland, hongkong, australia, uk or canada" 
            exit 1
          fi
          echo "::set-output name=awsRegion::$awsRegion"

      - name: Get Server version
        id: server
        run: |
          status=$(curl -s -o /dev/null -w "%{http_code}" https://${{ github.event.inputs.region }}.speckle.arup.com/api)
          echo "::set-output name=status::$status"

      - name: Abort deploy if server isn't running
        if: steps.server.output.status != 200
        run: |
          echo "::error Speckle server isn't up for ${{ github.event.inputs.region }}"
          exit 1

      - name: Get previously deployed tag
        id: previousTag
        run: |
          apt update && apt install -y jq unzip less
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          version=$(curl https://${{ github.event.inputs.region }}.speckle.arup.com/api | jq -r '.version')
          echo "::set-output name=version::$version"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.regionMap.outputs.awsRegion }}

      - name: Update reference version of speckle server
        run: |
          aws ssm put-parameter --name /${{ github.event.inputs.region }}-speckle-prod/version --value ${{ github.event.inputs.tag }} --overwrite
      
      - name: Run task to deploy speckle server
        id: deploySpeckleServer
        run: |
          command=$(aws ssm send-command \
              --targets "Key=tag:AnsibleAutomation,Values=${{ github.event.inputs.region }}-speckle-prod-playbook" \
              --document-name "AWS-ApplyAnsiblePlaybooks" \
              --output-s3-bucket-name "arup-${{ github.event.inputs.region }}-speckle-prod-playbook-logs" \
              --parameters '{"Check": ["False"],"InstallDependencies": ["True"],"PlaybookFile": ["${{ github.event.inputs.region }}_prod.yml"],"SourceInfo": ["{\"owner\": \"arup-group\", \"repository\":\"global-speckle-server-ansible-playbooks\",\"getOptions\":\"branch:${{ github.event.inputs.ansibleScriptsBranch }}\",\"tokenInfo\":\"{{ssm-secure:github-token}}\"}"],"SourceType": ["GitHub"],"Verbose": ["-v"]}')
          command_id=$(echo $command | jq -r '.Command.CommandId')
          echo "::set-output name=commandId::$command_id"
        
      - name: Wait until server has been deployed
        id: serverDeployed
        run: |
          SLEEP_PERIOD=5s
          TRY=0
          sleep 20s
          outcome=Pending
          until [ $TRY -eq 30 ] || [ $outcome == Success ] || [ $outcome == Failed ]; do
            outcome=$(aws ssm list-commands --command-id ${{ steps.deploySpeckleServer.outputs.commandId }} | jq -r '.Commands[0].Status')
            sleep $SLEEP_PERIOD
            TRY=$((TRY+1))
          done
          echo "::set-output name=outcome::$outcome"

      - name: Verify server has been updated
        if: steps.serverDeployed.output.outcome == 'Success'
        id: serverUpdateCheck
        run: |
          SLEEP_PERIOD=5s
          TRY=0
          until [ $TRY -eq 30 ] || [[ $(curl https://${{ github.event.inputs.region }}.speckle.arup.com/api | jq -r '.version') == v${{ github.event.inputs.tag }} ]]; do
            sleep $SLEEP_PERIOD
            TRY=$((TRY+1))
          done
          updated=$([ $TRY -lt 30 ] && echo true || echo false) 
          echo "::set-output name=updated::$updated"

      - name: Download logs from failed run
        if: steps.serverDeployed.output.outcome == 'Failed' || steps.serverUpdateCheck.output.updated == 'false'
        run: |
          aws s3 sync s3://arup-${{ github.event.inputs.region }}-speckle-prod-playbook-logs/${{ steps.deploySpeckleServer.outputs.commandId }} logs
      
      - name: Upload failure logs
        if: steps.serverDeployed.output.outcome == 'Failed' || steps.serverUpdateCheck.output.updated == 'false'
        uses: actions/upload-artifact@v2
        with:
          path: logs
    
      - name: Roll back to previous version of speckle if deploy failed
        if: steps.serverDeployed.output.outcome == 'Failed' || steps.serverUpdateCheck.output.updated == 'false'
        run: |
          aws ssm put-parameter --name /${{ github.event.inputs.region }}-speckle-prod/version --value ${{ steps.previousTag.outputs.version }} --overwrite

      - name: Run task to deploy previous version of speckle
        if: steps.serverDeployed.output.outcome == 'Failed' || steps.serverUpdateCheck.output.updated == 'false'
        run: |
          command=$(aws ssm send-command \
              --targets "Key=tag:AnsibleAutomation,Values=${{ github.event.inputs.region }}-speckle-prod-playbook" \
              --document-name "AWS-ApplyAnsiblePlaybooks" \
              --output-s3-bucket-name "arup-${{ github.event.inputs.region }}-speckle-prod-playbook-logs" \
              --parameters '{"Check": ["False"],"InstallDependencies": ["True"],"PlaybookFile": ["${{ github.event.inputs.region }}_prod.yml"],"SourceInfo": ["{\"owner\": \"arup-group\", \"repository\":\"global-speckle-server-ansible-playbooks\",\"getOptions\":\"branch:${{ github.event.inputs.ansibleScriptsBranch }}\",\"tokenInfo\":\"{{ssm-secure:github-token}}\"}"],"SourceType": ["GitHub"],"Verbose": ["-v"]}')
          command_id=$(echo $command | jq -r '.Command.CommandId')

      - name: Speckle Failed to deploy
        if: steps.serverDeployed.output.outcome == 'Failed' || steps.serverUpdateCheck.output.updated == 'false'
        run: |
          echo "::error Speckle Server deploy of ${{ github.event.inputs.tag }} caused errors reverted to previous version ${{ steps.previousTag.outputs.version }}. See logs attached to this pipeline."
          exit 1 
